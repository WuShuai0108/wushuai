package com.ctrip.util;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.URL;
import java.security.SecureRandom;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;

import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONObject;
import com.ctrip.model.Token;

/**
 * 通用工具类
 * @author Wu Shuai
 *
 */
public class CommonUtil {
	private static final Logger LOGGER = Logger.getLogger(CommonUtil.class);
	
	// 凭证获取（GET）
	public static final String tokenUrl = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET";
	
	/**
	 * 发送https请求
	 * @param requestUrl 请求地址  
	 * @param requestMethod 请求方式（GET、POST）
	 * @param requestStr 提交的数据
	 * @return JsonObject 通过JsonObject.get(key)的方式获取Json对象的属性值
	 */
	public static JSONObject httpsRequest(String requestUrl, String requestMethod, String requestStr) {
		JSONObject jsonObject = null;
		try {
			// 创建SSLContext对象，并使用我们指定的信任管理器初始化
			TrustManager[] tm = {new MyX509TrustManager()};
			SSLContext sslContext = SSLContext.getInstance("SSL", "SunJSSE");
			sslContext.init(null, tm, new SecureRandom());
			// 从上述SSLContext对象中得到SSLSocketFactory对象
			SSLSocketFactory ssf = sslContext.getSocketFactory();
			
			URL url = new URL(requestUrl);
			HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
			conn.setSSLSocketFactory(ssf);
			
			conn.setDoOutput(true);
			conn.setDoInput(true);
			conn.setUseCaches(false);
			// 设置请求方式（GET、POST）
			conn.setRequestMethod(requestMethod);
			
			// 当outputStr不为null时，向输出流写数据
			if (null != requestStr) {
				OutputStream outputStream = conn.getOutputStream();
				// 注意编码格式
				outputStream.write(requestStr.getBytes("UTF-8"));
				outputStream.close();
			}
			
			// 从输入流读取返回内容
			InputStream inputStream = conn.getInputStream();
			InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
			BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
			String str = null;
			StringBuffer buffer = new StringBuffer();
			while ((str = bufferedReader.readLine()) != null) {
				buffer.append(str);
			}
			
			// 释放资源
			bufferedReader.close();
			inputStreamReader.close();
			inputStream.close();
			inputStream = null;
			conn.disconnect();
			jsonObject = JSONObject.parseObject(buffer.toString());
		}
		catch (ConnectException ce) {
			LOGGER.error("连接超时：{}", ce);
		}
		catch (Exception e) {
			LOGGER.error("https请求异常：{}", e);
		}
		
		return jsonObject;
	}
	
	/**
	 * 获取接口访问凭证
	 * @param appid 
	 * @param appsecret 密钥
	 * @return
	 */
	public static Token getToken(String appid, String appsecret) {
		Token token = null;
		String requestUrl = tokenUrl.replace("APPID", appid).replace("APPSECRET", appsecret);
		// 发起GET请求获取凭证
		JSONObject jsonObject = httpsRequest(requestUrl, "GET", null);
		
		if (null != jsonObject) {
			try {
				token = new Token();
				token.setAccessToken(jsonObject.getString("access_token"));
				token.setExpiresIn(jsonObject.getIntValue("expires_in"));
			}
			catch (Exception e) {
				token = null;
				// 获取token失败
				LOGGER.error("获取token失败 errcode:" + jsonObject.get("errcode") + " errmsg:" + jsonObject.get("errmsg"), e);
			}
		}
		return token;
	}
}
